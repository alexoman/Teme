#include <fstream>
#include <bits/stdc++.h>

using namespace std;

fstream f("vector.in",ios::in)
fstream g("vector.out",ios::out)

void CitireDate(int v[],int n);
void AfisVect(int v[],int n);
void SortareLiniara(int v[],int n);
void CountSort(int v[],int n);
void Merge(int v[], int st,,int mij, int dr);
void MergeSort(int v[],int st, int dr);
void BubbleSort(int v[],int n);
void RadixSort(int v[],int n);
void CSort(int v[],int n,int k);
void QuickSort(int v[],int st, int dr);
int Maxim(int v[],int n);

int main()
{
    int v[101],n;
    CitireDate(v,n);
    //Inserati una din sortari
    AfisVect(v,n);
    return 0;
}

void CitireDate(int v[],int n)
{
    f>>n;
    for(int i=1;i<=n;i++)
        f>>v[i];

}
void AfisVect(int v[],int n)
{
    for(int i=1;i<=n;i++)
        g<<v[i]<<" ";
}
void SortareLiniara(int v[],int n)
{
    int aux;
    for(int i=1;i<n;i++)
        for(int j=i+1;j<=n;j++)
            if(v[i]>v[j])
            {
                aux=v[i];
                v[i]=v[j];
                v[j]=aux;
            }
}

void CountSort(int v[],int n)
{

    int vect[101];
    maxim=Maxim(v,n);
    int frecv[maxim+1]={};
    for(int i=0;i<=n;i++)
        frecv[v[i]]++;
    for(int i=1;i<=max;i++)
        frecv[i]+=frecv[i-1];
    for(int i=n;i>=1;i--)
    {
        vect[frecv[v[i]]-1]=v[i];
        frecv[v[i]]--;
    }
    for(int i=1;i<=n;i++)
        v[i]=vect[i];
}
void MergeSort(int v[], int st, int dr)
{
    if(st<dr)
    {
        int mij=st+(dr-st)/2;
        MergeSort(v,st,mij);
        MergeSort(v,mij+1,dr);
        Merge(v,st,mij,dr);
    }
}

void Merge(int v[], int st, int mij, int dr)
{
    int i,j,k;
    int n1=mij-st+1;
    int n2=dr-mij;
    int mij=st+dr/2;
    int st[n1],dr[n2];

    for(i=1;i<=n1;i++)
        st[i]=v[st+1];
    for(j=1;j<=n2;j++)
        dr[j]=v[mij+1+j];

    i=1,j=1,k=st;
    while(i<=n1 && j<=n2)
    {
        if(st[i]<=dr[j])
            v[k]=st[i],i++;
        else
            v[k]=dr[i],k++;
        k++;
    }
    while(i<=n1)
    {
        v[k]=st[i];
        i++;
        k++;
    }
    while(j<=n2)
    {
        v[k]=dr[j];
        j++;
        k++;
    }
}

void BubbleSort(int v[],int n)
{
    int i,j;
    for(i=1;i<n;i++)
        for(j=1;j<n-i;j++)
            if(v[j]>v[j+1])
                swap(&v[j],&v[j+1]);
}

void RadixSort(int v[],int n)
{
    int max=Maxim(v,n);

    for(int k=1;max/k>0;k*=10)
        CSort(v,n,k);
}
void QuickSort(int v[],int st, int dr)
{
    int i=st,j=dr;
    int k;
    int mij=v[(st+dr)/2];

    while(i<=j)
    {
        while(v[i]<mij)
            i++;
        while(v[j]>mij)
            j--;
        if(i<=j)
        {
            k=v[i];
            v[i]=v[j];
            v[j]=k;
            i++;
            j--;
        }
    }
    if(st<j)
        QuickSort(v,st,j);
    if(i<dr)
        QuickSort(v,i,dr);
}

int Maxim(int v[],int n)
{
    int k=v[1];
    for(int i=2;i<=n;i++)
        if(v[i]>k)
            k=v[i];
    return k;
}

void CSort(int v[],int n,int k)
{
    int vect[n];
    int i,frecv[10]={};

    for(i=1;i<=n;i++)
        frecv[(v[i]/k)%10]++;
    for(i=1;i<10;i++)
        frecv[i]+=frecv[i-1];
    for(i=n;i>=1;i--)
    {
        vect[frecv[(v[i]/k)%10]-1]=v[i];
        frecv[(v[i]/k)%10]--;
    }
    for(i=1;i<=n;i++)
        v[i]=vect[i];
}
